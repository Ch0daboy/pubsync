
import React, { useState, useEffect } from 'react';
import { RepurposedContent } from '@/entities/RepurposedContent';
import { motion } from 'framer-motion';
import { CheckSquare, Check, X, Edit, MessageSquare } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';

const ReviewCard = ({ content, onApprove, onReject, index }) => {
  const [editedContent, setEditedContent] = useState(content.repurposed_content);

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: index * 0.1 }}
      className="clay-element bg-white/60 p-6 space-y-4"
    >
      <div className="flex justify-between items-start">
        <div>
          <h3 className="font-bold text-lg text-gray-900">{content.original_content_title}</h3>
          <p className="text-sm text-gray-500">
            Repurposed from <span className="font-medium capitalize">{content.original_platform}</span> to <span className="font-medium capitalize">{content.target_platform}</span>
          </p>
        </div>
      </div>
      
      <div>
        <h4 className="font-semibold text-gray-700 mb-2 flex items-center gap-2">
          <MessageSquare className="w-4 h-4" />
          Generated Content
        </h4>
        <Textarea
          value={editedContent}
          onChange={(e) => setEditedContent(e.target.value)}
          rows={6}
          className="clay-element bg-white/80 focus:bg-white"
        />
      </div>

      <div className="flex items-center justify-end gap-3">
        <Button variant="outline" className="clay-button bg-white hover:bg-gray-50">
          <Edit className="w-4 h-4 mr-2" />
          Save Draft
        </Button>
        <Button onClick={() => onReject(content.id)} variant="destructive" className="clay-button bg-gradient-to-r from-red-100 to-pink-100 text-red-700 hover:text-red-800">
          <X className="w-4 h-4 mr-2" />
          Reject
        </Button>
        <Button onClick={() => onApprove(content.id, editedContent)} className="clay-button bg-gradient-to-r from-emerald-400 to-green-500 hover:from-emerald-500 hover:to-green-600 text-white">
          <Check className="w-4 h-4 mr-2" />
          Approve
        </Button>
      </div>
    </motion.div>
  );
};

export default function ReviewQueuePage() {
  const [pendingContent, setPendingContent] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  
  useEffect(() => {
    fetchPendingContent();
  }, []);

  const fetchPendingContent = async () => {
    setIsLoading(true);
    try {
      const data = await RepurposedContent.filter({ status: 'pending' });
      setPendingContent(data);
    } catch (e) {
      console.error("Failed to fetch pending content", e);
    } finally {
      setIsLoading(false);
    }
  };

  const handleApprove = async (id, updatedContent) => {
    await RepurposedContent.update(id, { status: 'approved', repurposed_content: updatedContent });
    fetchPendingContent();
  };

  const handleReject = async (id) => {
    await RepurposedContent.update(id, { status: 'rejected' });
    fetchPendingContent();
  };

  return (
    <div className="space-y-8">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-4">
          <div className="clay-element bg-gradient-to-br from-blue-400 to-indigo-500 p-3">
            <CheckSquare className="w-6 h-6 text-white" />
          </div>
          <div>
            <h1 className="text-3xl font-bold gradient-text">Approval Queue</h1>
            <p className="text-gray-600 font-medium">Approve, edit, or reject AI-generated content before publishing</p>
          </div>
        </div>
        <div className="clay-element bg-gradient-to-br from-blue-100 to-indigo-100 px-4 py-2">
            <span className="font-bold text-blue-800">{pendingContent.length}</span>
            <span className="text-sm font-medium text-blue-700"> items pending</span>
        </div>
      </div>

      <div className="space-y-6">
        {isLoading ? (
          <p>Loading review items...</p>
        ) : pendingContent.length > 0 ? (
          pendingContent.map((content, index) => (
            <ReviewCard 
              key={content.id} 
              content={content} 
              onApprove={handleApprove}
              onReject={handleReject}
              index={index}
            />
          ))
        ) : (
          <div className="text-center py-20 clay-element bg-white/40">
             <div className="mx-auto clay-element bg-gradient-to-br from-emerald-200 to-green-300 w-16 h-16 rounded-full flex items-center justify-center">
                <Check className="w-8 h-8 text-emerald-800" />
              </div>
            <h3 className="mt-4 text-lg font-semibold text-gray-900">All caught up!</h3>
            <p className="text-gray-600">There are no pending items in the review queue.</p>
          </div>
        )}
      </div>
    </div>
  );
}
